#+title: Clef

A universal keybindings manager.

* Notes
There are a few considerations for how X11 and Wayland handle keyboard inputs:
** X11
- Uses a centralized server that manages input and drawing
- Allow sapps to request a "grab" of the keyboard ~XGrabKeyboard~
- Low-level APIs typically involve Xli or XCB libraries
** Wayland
- Designed with security and isolation in mind. There is no central X server; the compositor is responsible for managing displays and input.
- Does not allow arbitrary applications to capture all keyboard input globally for security reasons. Global shortcuts are typically managed by the Wayland compositor itself (e.g., GNOME Shell, KDE Plasma, Sway).
- Applications receive keyboard events only when their windows are focused.
- To implement system-wide keybindings, your program would either need to:
    - Be part of the compositor.
    - Use specific protocols or D-Bus interfaces provided by the compositor for registering global shortcuts (these are not standardized across all compositors).
    - Operate at a lower level, beneath the display server, by directly processing kernel input events.
** Low-Level APIs and Approaches for Key Presses
- =evdev= (Kernel Event Devices)
  - Exposed raw input events through event devices (found in =/dev/input/=)
  - This does work independently of X or Wayland, but requires root and/or adding a user to the =input= group, which has security implications
  - Also requires converting raw scancode events into keysyms, which requires =libxkbcommon=

* Implementation & Structure
** Configuration
Allow users to define key combos in a config file. Parse values from the config
** Event Reading Backend
This module will handle the low-level interaction by using Guile's FFI for =libinput=
** Key Event Processing
This module will take raw events and use =libxkbcommon= (via FFI) to translate keycodes into keysyms.
** Action Execution
Once a configured key combo is detected, this module will execute the corresponding action (e.g. run a shell command, send a D-Bus message, execute a scheme function)
** Event Loop
A loop that continuously reads and processes input
